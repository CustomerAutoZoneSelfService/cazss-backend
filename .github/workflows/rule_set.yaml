name: rule_set

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
    types: [opened, synchronize, reopened]

jobs:
  validate_branch:
    name: validate_branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Validate branch name
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            branch_name="${GITHUB_REF#refs/heads/}"
          elif [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            branch_name="${GITHUB_HEAD_REF}"
          else
            echo "Unsupported event: ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "Branch name: $branch_name"

          # Updated branch name patterns
          team_regex="^team-[0-9]+-(main|dev)$"
          developer_regex="^[A-Z]+-[0-9]+$"
          predefined_regex="^(main|dev)$"

          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            if [[ "$branch_name" =~ $developer_regex ]]; then
              echo "Error: Developer branches are not allowed to be pushed."
              exit 1
            elif [[ "$branch_name" =~ $team_regex ]] || [[ "$branch_name" =~ $predefined_regex ]]; then
              echo "Valid branch name for push event."
            else
              echo "Error: Invalid branch name for push event."
              exit 1
            fi
          elif [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            if [[ "$branch_name" =~ $developer_regex ]] || [[ "$branch_name" =~ $team_regex ]] || [[ "$branch_name" =~ $predefined_regex ]]; then
              echo "Valid branch name for pull request event."
            else
              echo "Error: Invalid branch name for pull request event."
              exit 1
            fi
          fi
        shell: bash

  validate_commits:
    name: validate_commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all commits
        run: git fetch --prune --unshallow || true

      - name: Validate commit messages
        run: |
          # Commit types (case-insensitive)
          valid_commit_regex='^([Rr]efactor|[Ff]eature|[Ff]eat|[Bb]ugfix|[Dd]ocs|[Cc]hore|[Bb]ug|[Hh]otfix): .+ \([A-Z]+-[0-9]+(, *[A-Z]+-[0-9]+)*\)$'
          echo "Using regex: $valid_commit_regex"

          commits=$(git log --no-merges --pretty=format:"%s")
          invalid_commits=()
          while IFS= read -r commit_message; do
            if ! [[ "$commit_message" =~ $valid_commit_regex ]]; then
              invalid_commits+=("$commit_message")
              echo "Invalid commit message: $commit_message"
            fi
          done <<< "$commits"

          if [ ${#invalid_commits[@]} -gt 0 ]; then
            echo "Invalid commit messages found. Please amend or rebase your branch:"
            printf '%s\n' "${invalid_commits[@]}"
            exit 1
          else
            echo "All commit messages are valid."
          fi
        shell: bash
